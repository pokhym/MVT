load /home/pk/maude/machine-int.maude 

fmod BINARY-NAT is
    protecting MACHINE-INT{32-BIT} .
    sorts Bit Bits .
    subsort Bit < Bits .

    ops 0 1 : -> Bit .

    op __ : Bits Bits -> Bits [assoc] .
    op |_| : Bits -> MachineInt .
    op not_ : Bits -> Bits .
    op normalize : Bits -> Bits . 
    ops _+_ _*_ : Bits Bits -> Bits [assoc comm] .
    op _^_ : Bits Bits -> Bits .
    op _>_ : Bits Bits -> Bool .
    op _?_:_ : Bool Bits Bits -> Bits .

    vars S T : Bits .
    vars B C : Bit .
    var L : Bool .

    *** Length
    eq | B | = 1 .
    eq | S B | = | S | + 1 .

    *** Not
    eq not (S T) = (not S) (not T) .
    eq not 0 = 1 .
    eq not 1 = 0 .

    *** Normalize suppresses zeros at the left of a binary number
    eq normalize(0 S) = normalize(S) .
    eq normalize(1 S) = 1 S .

    *** Greater than
    eq 0 > S = false .
    eq 1 > (0).Bit = true .
    eq 1 > (1).Bit = false .
    eq B > (0 S) = B > S .
    eq B > (1 S) = false .
    eq (1 S) > B = true .
    eq (B S) > (C T) 
      = if | normalize(B S) | > | normalize(C T) |
        then true
        else if | normalize(B S) | < | normalize(C T) |
             then false
             else (S > T)
             fi
        fi .

    *** Binary addition
    eq 0 + S = S .
    eq 1 + 1 = 1 0 .
    eq 1 + (T 0) = T 1 .
    eq 1 + (T 1) = (T + 1) 0 .
    eq (S B) + (T 0) = (S + T) B .
    eq (S 1) + (T 1) = (S + T + 1) 0 .

    *** Binary multiplication
    eq 0 * T = 0 .
    eq 1 * T = T .
    eq (S B) * T = ((S * T) 0) + (B * T) .

    *** Binary exponentiation
    eq T ^ 0 = 1 .
    eq T ^ 1 = T .
    eq T ^ (S B) = (T ^ S) * (T ^ S) * (T ^ B) .

    *** Mixfix ?: operator
    eq L ? S : T = if L then S else T fi .
  endfm